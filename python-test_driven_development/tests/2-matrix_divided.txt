# Test file for matrix_divided function

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test 1: Normal case
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test 2: Ensure original matrix is unchanged
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

# Test 3: Division by negative number
>>> print(matrix_divided(matrix, -3))
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

# Test 4: Floating-point numbers
>>> matrix = [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]
>>> print(matrix_divided(matrix, 2))
[[0.55, 1.1, 1.65], [2.2, 2.75, 3.3]]

# Test 5: Division by float
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 2.5))
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test 6: Error - division by zero
>>> try:
...     matrix_divided(matrix, 0)
... except ZeroDivisionError as e:
...     print(str(e))
division by zero

# Test 7: Error - invalid matrix (not all elements are numbers)
>>> try:
...     matrix_divided([[1, 2, 3], [4, "5", 6]], 3)
... except TypeError as e:
...     print(str(e))
matrix must be a matrix (list of lists) of integers/floats

# Test 8: Error - rows of different sizes
>>> try:
...     matrix_divided([[1, 2, 3], [4, 5]], 2)
... except TypeError as e:
...     print(str(e))
Each row of the matrix must have the same size

# Test 9: Error - invalid divisor type
>>> try:
...     matrix_divided([[1, 2], [3, 4]], "2")
... except TypeError as e:
...     print(str(e))
div must be a number

# Test 10: Special floating point cases
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, float('inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> print(matrix_divided(matrix, float('-inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
